{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport anecdoteService from '../services/anecdotes';\nconst anecdoteSlice = createSlice({\n  name: 'anecdotes',\n  initialState: [],\n  reducers: {\n    vote(state, action) {\n      const id = action.payload;\n      const anecdoteToChange = state.find(a => a.id === id);\n      const changedAnecdote = { ...anecdoteToChange,\n        votes: anecdoteToChange.votes + 1\n      };\n      state.map(anecdote => anecdote.id !== id ? anecdote : changedAnecdote);\n    },\n\n    appendAnecdote(state, action) {\n      state.push(action.payload);\n    },\n\n    setAnecdotes(state, action) {\n      return action.payload;\n    }\n\n  }\n});\nexport const {\n  vote,\n  create,\n  appendAnecdote,\n  setAnecdotes\n} = anecdoteSlice.actions;\nexport const initializeAnecdotes = () => {\n  return async dispatch => {\n    const anecdotes = await anecdoteService.getAll();\n    dispatch(setAnecdotes(anecdotes));\n  };\n};\nexport const createAnecdote = content => {\n  return async dispatch => {\n    const newAnecdote = await anecdoteService.createNew(content);\n    dispatch(appendAnecdote(newAnecdote));\n  };\n};\nexport const voteAnecdote = anecdoteObject => {\n  console.log(anecdoteObject);\n  return async dispatch => {\n    const votes = anecdoteObject.likes + 1;\n    const updatableAnecdote = { ...anecdoteObject,\n      votes\n    };\n    await anecdoteService.update(anecdoteObject.id, updatableAnecdote);\n    const anecdotes = await anecdoteService.getAll();\n    dispatch(setAnecdotes(anecdotes));\n  };\n};\nexport default anecdoteSlice.reducer;","map":{"version":3,"sources":["/home/katjaker/FullStack/osa6/redux-anecdotes/src/reducers/anecdoteReducer.js"],"names":["createSlice","anecdoteService","anecdoteSlice","name","initialState","reducers","vote","state","action","id","payload","anecdoteToChange","find","a","changedAnecdote","votes","map","anecdote","appendAnecdote","push","setAnecdotes","create","actions","initializeAnecdotes","dispatch","anecdotes","getAll","createAnecdote","content","newAnecdote","createNew","voteAnecdote","anecdoteObject","console","log","likes","updatableAnecdote","update","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AAEA,MAAMC,aAAa,GAAGF,WAAW,CAAC;AAChCG,EAAAA,IAAI,EAAE,WAD0B;AAEhCC,EAAAA,YAAY,EAAE,EAFkB;AAGhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAClB,YAAMC,EAAE,GAAGD,MAAM,CAACE,OAAlB;AACA,YAAMC,gBAAgB,GAAGJ,KAAK,CAACK,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACJ,EAAF,KAASA,EAAzB,CAAzB;AACA,YAAMK,eAAe,GAAG,EACtB,GAAGH,gBADmB;AAEtBI,QAAAA,KAAK,EAAEJ,gBAAgB,CAACI,KAAjB,GAAyB;AAFV,OAAxB;AAIAR,MAAAA,KAAK,CAACS,GAAN,CAAUC,QAAQ,IAChBA,QAAQ,CAACR,EAAT,KAAgBA,EAAhB,GAAqBQ,QAArB,GAAgCH,eADlC;AAGD,KAXO;;AAaRI,IAAAA,cAAc,CAACX,KAAD,EAAQC,MAAR,EAAgB;AAC5BD,MAAAA,KAAK,CAACY,IAAN,CAAWX,MAAM,CAACE,OAAlB;AACD,KAfO;;AAiBRU,IAAAA,YAAY,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAC1B,aAAOA,MAAM,CAACE,OAAd;AACD;;AAnBO;AAHsB,CAAD,CAAjC;AA0BA,OAAO,MAAM;AAAEJ,EAAAA,IAAF;AAAQe,EAAAA,MAAR;AAAgBH,EAAAA,cAAhB;AAAgCE,EAAAA;AAAhC,IAAiDlB,aAAa,CAACoB,OAArE;AAEP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACvC,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMC,SAAS,GAAG,MAAMxB,eAAe,CAACyB,MAAhB,EAAxB;AACAF,IAAAA,QAAQ,CAACJ,YAAY,CAACK,SAAD,CAAb,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,cAAc,GAAGC,OAAO,IAAI;AACvC,SAAO,MAAMJ,QAAN,IAAkB;AACvB,UAAMK,WAAW,GAAG,MAAM5B,eAAe,CAAC6B,SAAhB,CAA0BF,OAA1B,CAA1B;AACAJ,IAAAA,QAAQ,CAACN,cAAc,CAACW,WAAD,CAAf,CAAR;AACD,GAHD;AAID,CALM;AAOP,OAAO,MAAME,YAAY,GAAGC,cAAc,IAAI;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ;AACA,SAAO,MAAMR,QAAN,IAAkB;AACvB,UAAMT,KAAK,GAAGiB,cAAc,CAACG,KAAf,GAAuB,CAArC;AACA,UAAMC,iBAAiB,GAAG,EAAC,GAAGJ,cAAJ;AAAoBjB,MAAAA;AAApB,KAA1B;AACA,UAAMd,eAAe,CAACoC,MAAhB,CAAuBL,cAAc,CAACvB,EAAtC,EAA0C2B,iBAA1C,CAAN;AACA,UAAMX,SAAS,GAAG,MAAMxB,eAAe,CAACyB,MAAhB,EAAxB;AACAF,IAAAA,QAAQ,CAACJ,YAAY,CAACK,SAAD,CAAb,CAAR;AACD,GAND;AAOD,CATM;AAWP,eAAevB,aAAa,CAACoC,OAA7B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport anecdoteService from '../services/anecdotes'\n\nconst anecdoteSlice = createSlice({\n  name: 'anecdotes',\n  initialState: [],\n  reducers: {\n    vote(state, action) {\n      const id = action.payload\n      const anecdoteToChange = state.find(a => a.id === id)\n      const changedAnecdote = {\n        ...anecdoteToChange,\n        votes: anecdoteToChange.votes + 1\n      }\n      state.map(anecdote =>\n        anecdote.id !== id ? anecdote : changedAnecdote\n      )      \n    },\n\n    appendAnecdote(state, action) {\n      state.push(action.payload)\n    },\n    \n    setAnecdotes(state, action) {\n      return action.payload\n    }\n  }\n})\n\nexport const { vote, create, appendAnecdote, setAnecdotes } = anecdoteSlice.actions\n\nexport const initializeAnecdotes = () => {\n  return async dispatch => {\n    const anecdotes = await anecdoteService.getAll()\n    dispatch(setAnecdotes(anecdotes))\n  }\n}\n\nexport const createAnecdote = content => {\n  return async dispatch => {\n    const newAnecdote = await anecdoteService.createNew(content)\n    dispatch(appendAnecdote(newAnecdote))\n  }\n}\n\nexport const voteAnecdote = anecdoteObject => {\n  console.log(anecdoteObject)\n  return async dispatch => {\n    const votes = anecdoteObject.likes + 1\n    const updatableAnecdote = {...anecdoteObject, votes}\n    await anecdoteService.update(anecdoteObject.id, updatableAnecdote)\n    const anecdotes = await anecdoteService.getAll()\n    dispatch(setAnecdotes(anecdotes))\n  }\n}\n\nexport default anecdoteSlice.reducer\n"]},"metadata":{},"sourceType":"module"}